name: Deploy to Pages (Official Action)

on:
  # 当推送到 main 分支时触发
  push:
    branches: [ main ]
  
  # 允许手动触发
  workflow_dispatch:

# 设置 GITHUB_TOKEN 权限
permissions:
  contents: read
  pages: write
  id-token: write

# 确保同时只有一个部署任务运行
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: |
        # 检查锁文件是否存在和兼容
        if [ -f "pnpm-lock.yaml" ]; then
          echo "发现 pnpm-lock.yaml，尝试使用 frozen-lockfile 安装"
          pnpm install --frozen-lockfile || {
            echo "frozen-lockfile 安装失败，使用普通安装"
            pnpm install --no-frozen-lockfile
          }
        else
          echo "未发现 pnpm-lock.yaml，使用普通安装"
          pnpm install
        fi
      
    - name: Build project
      run: pnpm run build
      
    - name: Prepare deployment files
      run: |
        # 复制 CNAME 文件（如果存在）
        if [ -f "CNAME" ]; then
          echo "复制 CNAME 文件到 dist 目录"
          cp CNAME dist/
          echo "CNAME 内容: $(cat CNAME)"
        else
          echo "未找到 CNAME 文件"
        fi
        
        # 添加 .nojekyll 文件
        echo "创建 .nojekyll 文件"
        touch dist/.nojekyll
        
        # 显示最终的目录结构
        echo "部署文件列表:"
        find dist/ -type f | sort
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Deployment success
      run: |
        echo "🎉 部署成功!"
        echo "访问地址: ${{ steps.deployment.outputs.page_url }}"